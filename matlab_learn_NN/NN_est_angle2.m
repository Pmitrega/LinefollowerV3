function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 06-Nov-2023 17:13:18.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx10 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [28;66;40;-2;17;11;17;13;26;-4];
x1_step1.gain = [0.00163532297628782;0.00171232876712329;0.00185185185185185;0.00184672206832872;0.00198019801980198;0.00196270853778214;0.00184842883548983;0.00182648401826484;0.0017921146953405;0.00175746924428822];
x1_step1.ymin = -1;

% Layer 1
b1 = [6.3913068486343167507;-6.001547232496518447;0.2178372639876752781;1.7344728800937576629;1.6283643468284263456;0.33999180377497811856;4.9702653319434197954];
IW1_1 = [-2.3043975603756368109 0.99181843126646629383 -0.51666567506487104389 -1.8074245154655756984 1.0005687606452557947 0.36079349602448734791 1.123378111598857032 0.42199063567468503289 -1.9275231229368101626 -1.110213578065073925;-0.55052547610337310147 -0.46315577057245693737 0.080040481066446247937 -0.52239855054212636087 0.7710986598361531108 1.2457284388951357368 -0.28037509220706052782 1.0795948059143647413 1.1670960689391471909 4.6181817558813111901;0.50452684969372374457 0.78792691484449717265 -0.16320343877276910494 -0.41241908960301526532 0.44941911708348136756 -0.74520186885126626919 1.410702574478199578 -0.65556763099093151581 0.063382989919286911173 -1.4257620405580813117;-1.1899094899538216197 2.5329829121633089528 0.75159457035170085248 -0.42149582183981626482 -1.2108286283445213183 -2.2641344168869133036 0.12522246891693539217 -1.2685858171652200088 -0.78109761749689143873 -0.63371104704842695643;0.14532427798143990327 0.27970407480714210013 -1.2812046476488685443 0.9058807304721347986 0.54504409881256055126 0.033798342927090288534 0.065620264264732733328 0.80115258499707120432 0.65634393644204369611 -2.0697486494099339716;0.22765709791315519306 0.14072373771898027961 -0.79146034331513703819 -0.72175482049529238182 -0.99340351753242206456 -1.3695999173336672605 2.2167607864124772021 -0.96333632558351045549 0.06041985755260994434 -0.69607742409634365544;0.32991126738981657596 0.23185312848212785708 -0.1799077250773380432 0.3385746699615034272 -0.81649845724016689719 -1.2536127280182676191 -0.11292005079745032203 -0.82804339595179676792 -0.91064651038156341212 -3.0392650151448110662];

% Layer 2
b2 = 2.018506200648158444;
LW2_1 = [-2.3204001030305345665 2.4559198788715677075 0.32114144318291421021 -0.36897848631500107519 -0.3450477561669652582 -0.23466729914613657093 3.2513691061822620476];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0217391304347826;
y1_step1.xoffset = -43;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
