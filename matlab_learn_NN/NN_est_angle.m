function [y1] = NN_est_angle(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 06-Nov-2023 12:39:47.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.048;0.138;0.101;0.069;0.099;0.095;0.091;0.103;0.102;-0.004];
x1_step1.gain = [1.66666666666667;1.85185185185185;2.002002002002;2.01207243460765;2.1551724137931;2.13903743315508;1.98807157057654;2.01612903225806;1.97433366238894;1.83150183150183];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.62320248833671421096;0.73835083234481158065;-0.51550434571088687985;-0.9027418703720488935;1.6856153800919031482];
IW1_1 = [0.43887700571005683337 1.2039822612203168184 -0.41227588833393796763 -1.0936687580764181682 -0.81051217922694407392 -1.2262978487665177063 1.7106895712122951458 -0.44073548042942128911 -0.43605904676639895001 -0.98016214150228919699;-2.3732541890016780606 -0.46726937666925172365 1.8941451346903757091 3.0545357552852254734 0.53009837339165999381 1.2029326802026347742 0.50453555644314584949 1.8897305370994268436 -2.3775866202887039336 -0.43625033228223242254;0.34014228794145079382 0.22113524319033700527 0.48320759469165525113 -0.062362351813805783074 0.75564169721607676866 0.83531425122029079322 -1.6072548861349094107 0.17173229267549608434 1.4373477226971447251 -0.53263201857469455458;1.0535320617990844294 0.14665126885588902761 0.54269903236207583941 0.3958979889008535924 0.19874082459186234728 -0.16294312747589209667 -0.70809968659601330021 -0.561619190082212838 1.1867225784186405946 -1.4195276640817708902;-1.7622112450908966608 -0.12054643290068771389 -1.0079596046464718295 1.6948853187347339144 -0.094260476004674048633 -0.33483256318684662123 -1.5223502377585871326 0.3447254153718328773 0.25035008109105399976 1.3308632777752207321];

% Layer 2
b2 = 0.13917414263140828745;
LW2_1 = [-0.93315180660330132589 -0.20160109559732980467 -0.87782897693346906287 0.87415302283854867671 -0.40959780354045255413];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0217391304347826;
y1_step1.xoffset = -43;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
