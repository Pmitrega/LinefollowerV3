function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-Nov-2023 17:22:57.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-251;-557;-1046];
x1_step1.gain = [0.00398406374501992;0.000584966364434045;0.000584966364434045];
x1_step1.ymin = -1;

% Layer 1
b1 = [4.1124546334851048712;-0.60576539780029281523;-0.88659247406648555856;1.9148971607425138153;-0.56959854664569542493;-3.4085957420920682814;-0.23929077318506414285;-1.3815985135061186195;1.2087862654714338628;5.5860662748620653062;-3.6844146963032042841;2.9576275260132809386;-2.3266466191759205273;-1.3163280100234062697;-1.0228673924490494507];
IW1_1 = [-0.43133662841342124139 -1.2010653891289500006 -3.6798745849817602327;9.9598971041993955566 -0.29498541978978992661 1.0160272226691444697;-0.58064051043131015284 -0.97011315932781361226 -0.40105900217315998413;0.55689982813164207176 -2.3575782551862682901 -3.1200784246704738045;-1.3898505116886590294 -1.442944024176905593 1.4526443889418898525;-3.6151415702701399368 -2.3156354032378048124 4.0027403320517187524;-17.296905548256269469 1.2125524201275534875 0.71035479100142162601;5.9220558146183597259 5.1674186037698781604 -2.7102097276699104178;-0.93040812434546782406 -1.0177413156477654876 -2.7431660144338723128;0.079895503246544374853 3.7637989102156024224 -6.5416941412116207388;-0.59944043320573514588 -3.4279663346399167345 2.2302940285067092141;1.2363645349899594628 -2.2609584645236870948 -4.2305203313716894797;-0.18410856356342497619 -2.2251332055874990523 -2.5585271408187919562;3.0219519475623783933 0.14392821955532886236 2.5599354385340311602;-3.4757772196286920163 -3.0856040372626889479 3.2850241853237198697];

% Layer 2
b2 = [-0.38262674667390428329;-0.47641553551254028909];
LW2_1 = [0.74873822990078109374 -1.8528510356382668078 2.6729738882246074638 -0.16490517054413894593 2.5896028732132059247 -2.461093315348068078 0.36542493495110323076 0.38873089841208857687 0.77662616993426980549 -1.170577625237158248 -0.26335510534765577129 -0.24064229276665688451 -1.5974403088876503176 1.9276646607663054933 -1.5522211680272279821;0.26046682381005703544 0.091466302867827350975 1.2519388306813712397 -1.0776080322421082158 -2.506595878020942969 1.5935288419810551552 -1.1754331601050596046 -0.31630692665056786561 -0.69750845260672444947 0.71522904066828973946 -0.1161441079889717759 1.1232437684224709784 -1.2841988337303056333 -0.62519364996375770271 1.3147347331632053269];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [9.89805008413343e-05;9.92014285005704e-05];
y1_step1.xoffset = [-9999;-9999];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
