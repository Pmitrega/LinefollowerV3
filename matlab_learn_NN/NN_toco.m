function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 25-Oct-2023 15:45:53.
% 
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0];
x1_step1.gain = [3.05562770232075e-05;3.05227012590614e-05;0.00195503421309873];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.2381050843986045606;-3.3213473305190697182;-2.8434703081289578463;2.3772323887972506284;-1.9674442503933080584;1.938167196883241683;-2.0835350200482207761;0.92101059938991347575;-0.42914733101029195472;0.27899690092841433753;-0.31311075145803990427;0.83192052596596277603;1.9704217917660846737;-1.6703526264751453745;-1.7499813358766711513;-3.9514943406757088162;4.2709882705029755812;-2.9443951199678424224;3.9067129980825163749];
IW1_1 = [1.8977232867311959463 0.97372193310557553225 -4.0910134341653154877;2.36227942031924254 1.8348269809404922359 2.2384356602740638209;0.67055830081909229001 3.5252093661912287104 1.1587518219122578955;-2.4895544972845402576 -0.88327520554924277008 2.8514562152942666273;2.6491009650135839415 -1.5879698562519439786 -2.4380801223852004433;-3.5576333310523904352 2.1942425585727196591 3.4967476759685540699;0.9188253919868980546 3.4637173785834858286 0.49619852748147452726;-3.6325062968144070652 -0.39134695604989233608 0.98711376310221909947;-0.43778925759910752857 -3.7368690327049050026 -0.6220899478310283337;1.6711589531496604533 0.54717020239906155599 -3.2962041870331661997;-1.9795624347768361329 -2.236089477272031445 2.266128594506180427;4.4741628659970738013 -0.2489027906882897434 -2.0295295933155932389;2.4242068381483488082 -1.7603615640123155828 -1.9880358671030184947;-1.8896517901873057799 -2.7601760076742127836 1.5209133360707733917;-1.8966971796025200447 1.2158670545910421623 3.2098175041646723749;-6.5449325366299433426 -0.090326945213214812624 1.6154144399137968513;0.59421195970912354944 1.1534877865446655498 3.0564075659883296332;-3.5079856038809102969 -2.4422840691472424979 -2.4923179474044441228;2.7669078015902668355 2.1166701101661140605 -1.2525164289097268089];

% Layer 2
b2 = [0.74370624204299284887;-0.36876863876747167925];
LW2_1 = [0.84595185736057043613 0.50323024441025376863 0.39751579070051351605 -0.70219450420939200086 -0.41618713788762967676 -0.87205629566277265141 0.053163602658658104527 -1.005450585538178121 0.27918149173512635253 -0.75974771517687478273 0.59342096564316748619 -0.40410755586760233049 -1.131112830767248667 -0.59677857560836000683 -0.12323439184075971053 0.39126112620800029829 0.53193430163893029583 2.2063753636001006697 0.37365459702184811164;-2.2164130720771004768 0.42957766508610251144 -0.46258450331115358312 1.5988892446662250624 0.46224054990954144273 2.4199933583203154797 -1.5911718218266823754 1.6534012634498465033 -1.4476042342346904235 -0.057479826489013327584 0.0050842704768562507756 1.9832602793133990993 0.8762472712578118772 -0.52750203934030537312 0.29880396102020601035 -4.8777740546786061415 -1.4940666147076782089 -0.67678851595239497563 -1.1257291642858104908];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [3.05273601465313e-05;3.05660838733341e-05];
y1_step1.xoffset = [0;97];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
